sample(1:6)
sample(1:6, 1)
sum(sample(1:6, 2, replace = T))
}
sum(sample(1:6, 2, replace = T))
NUMBER_OF_ROWS <- 10000
NUMBER_OF_COLS <- 6
x <- matrix(NUMBER_OF_ROWS, NUMBER_OF_COLS)
x[1, 1]
x
x <- matrix(sample(1:6, NUMBER_OF_ROWS*NUMBER_OF_COLS, replace = T),
nrow = NUMBER_OF_ROWS)
NUMBER_OF_ROWS <- 100
NUMBER_OF_COLS <- 6
x <- matrix(sample(1:6, NUMBER_OF_ROWS*NUMBER_OF_COLS, replace = T),
nrow = NUMBER_OF_ROWS)
x[1]
x[1,1]
str(x)
x
x[1,]
x[1,1] == x[1,2]
if(TRUE) {
print(1)
}
if(TRUE) {
print(1)
}
else {
print(2)
}
if(TRUE) {
print(1)
}
else print(2)
if(TRUE) {
print(1)
}
else(print(2))
if(TRUE) {
print(1)
}
else
print(2)
if(TRUE) {
print(1)
}
else
print(2)
if(TRUE) {
print(1)
}
else print(2)
if(TRUE) print(1) else print(2)
if(FALSE) print(1) else print(2)
double3 <- function(x) {
if(x[1] == x[2]) {
if(x[3] == x[4]) {
if(x[5] == x[6]) return TRUE
}
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
if(x[3] == x[4]) {
if(x[5] == x[6]) return TRUE
}
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
if(x[3] == x[4]) {
if(x[5] == x[6]) return TRUE
}
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
if(x[3] == x[4]) {
if(x[5] == x[6]) return TRUE
}
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
return TRUE
}
}
mytrans <- function(x) {
if (!is.matrix(x)) {
warning("argument is not a matrix: returning NA")
return(NA_real_)
}
y <- matrix(1, nrow=ncol(x), ncol=nrow(x))
for (i in 1:nrow(x)) {
for (j in 1:ncol(x)) {
y[j,i] <- x[i,j]
}
}
return(y)
}
double3 <- function(x) {
if(x[1] == x[2]) {
return TRUE
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
return 0
}
}
double3 <- function(x) {
if(x[1] == x[2]) {
return 1
}
}
double3 <- function(x) {
if(x[,1] == x[,2]) {
return 1
}
}
x[,1] == x[,2])
x[,1] == x[,2]
double3 <- function(x) {
if(x) {
return 1
}
}
double3 <- function(x) {
if(TRUE) {
return 1
}
}
double3 <- function(x) {
return TRUE
}
doubletree <- function(x) {
return TRUE
}
doubletree <- function(x) return TRUE
myfunction <- function(x) return TRUE
myfunction <- function(x) return TRUE
myfunction <- function(x = 1) return TRUE
myfunction <- function() return TRUE
mytrans <- function(x) return TRUE
mytrans <- function(x) return T
mytrans <- function(x) return 0
mytrans <- function(x) return
mytrans <- function(x) return(T)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[2] == v[3]) {
if(v[4] == v[5]) {
return(T)
}
}
}
else return(F)
}
y <- c(1, 1, 2, 2, 3, 3)
double3(y)
print(double3(y))
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[2] == v[3]) {
if(v[4] == v[5]) {
print("T")
return(T)
}
}
}
else return(F)
}
print(double3(y))
double3(y)
y
y[1]
y[2]
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
print("T")
return(T)
}
}
}
else return(F)
}
double3(y)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
return(T)
}
}
}
else return(F)
}
y
y <- c(1, 1, 2, 2, 3, 4)
double3(y)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
return(T)
}
}
}
return(F)
}
double3(y)
y <- c(1, 1, 2, 2, 3,3)
double3(y)
apply(x, 1, double3)
apply(x, 1, double3)
output <- apply(x, 1, double3)
table(output)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
return(T)
}
}
}
return(F)
}
NUMBER_OF_ROWS <- 1000
NUMBER_OF_COLS <- 6
x <- matrix(sample(1:6, NUMBER_OF_ROWS*NUMBER_OF_COLS, replace = T),
nrow = NUMBER_OF_ROWS)
output <- apply(x, 1, double3)
table(output)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
return(T)
}
}
}
return(F)
}
NUMBER_OF_ROWS <- 10000
NUMBER_OF_COLS <- 6
x <- matrix(sample(1:6, NUMBER_OF_ROWS*NUMBER_OF_COLS, replace = T),
nrow = NUMBER_OF_ROWS)
output <- apply(x, 1, double3)
table(output)
double3 <- function(v) {
# takes a vector v of length 6 and checks if the first and second elements are
# equal, third and fourth are equal, and fifth and sixth are equal
if(length(v) != 6) {
return("input should be of length 6")
}
if(v[1] == v[2]) {
if(v[3] == v[4]) {
if(v[5] == v[6]) {
return(T)
}
}
}
return(F)
}
NUMBER_OF_ROWS <- 100000
NUMBER_OF_COLS <- 6
x <- matrix(sample(1:6, NUMBER_OF_ROWS*NUMBER_OF_COLS, replace = T),
nrow = NUMBER_OF_ROWS)
output <- apply(x, 1, double3)
table(output)
488/100000
1/6^3
pbinom(3, 50, 1/6^3)
pbinom(3, 50, 1/6^3, lower.tail = F)
pbinom(3, 60, 1/6^3, lower.tail = F)
sum(output)
sum(output)/NUMBER_OF_ROWS
output: html_document keep_md: True
6^3
pbinom(3, 150, 1/216)
pbinom(2, 150, p = 1/216, lower.tail = F)
pbinom(2, 150, 1/216)
pbinom(1, 150, 1/216)
pbinom(0, 150, 1/216)
dbinom(0, 150, 1/216)
dbinom(1, 150, 1/216)
dbinom(2, 150, 1/216)
dbinom(3, 150, 1/216)
pbinom(0, 150, 1/216)
pbinom(0, 150, 1/216, lower.tail = F)
# Chunk 1
library(dplyr)
library(stringr)
library(tidyr)
photos <- read.csv(file = "~/Dropbox/Mike/photo_analysis/all_photo_dates.csv")
photos <- tbl_df(photos)
# Chunk 2
photos
# Chunk 3
photos <- photos %>% separate(SourceFile, c("dot", "dname", "fname"), sep = "/", remove = TRUE)
photos <- photos[,2:4] # drop the first column of dots
photos
# Chunk 4
photos$DateTimeOriginal <- as.POSIXct(strptime(photos$DateTimeOriginal, format = "%Y:%m:%d %H:%M:%S"))
# Chunk 5
photos <- photos %>% mutate(year = as.POSIXlt(DateTimeOriginal)$year + 1900)
photos
# Chunk 6
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
folder_years <- photos %>% group_by(dname) %>% summarize(year = Mode(year))
folder_years
# Chunk 7
folder_output <- list()
for(i in sort(unique(folder_years$year))) {
x <- folder_years %>% filter(year == i)
folder_output[as.character(i)][1] <- x[,1]
}
# Chunk 8
folder_output[["2010"]]
# Chunk 9
format_dir_list <- function(x) {
z <- NA
for (i in 1:length(x)) {
z[i] <- paste0("\'", x[i], "\'")
}
return(cat(z))
}
for (i in 1:16) {
cat("\n")
print(names(folder_output)[i])
cat("\n")
format_dir_list(folder_output[[i]])
cat("\n")
}
# Chunk 1
library(dplyr)
library(stringr)
library(tidyr)
photos <- read.csv(file = "~/Dropbox/Mike/photo_analysis/all_photo_dates.csv")
photos <- tbl_df(photos)
# Chunk 2
photos
# Chunk 3
photos <- photos %>% separate(SourceFile, c("dot", "dname", "fname"), sep = "/", remove = TRUE)
photos <- photos[,2:4] # drop the first column of dots
photos
# Chunk 4
photos$DateTimeOriginal <- as.POSIXct(strptime(photos$DateTimeOriginal, format = "%Y:%m:%d %H:%M:%S"))
# Chunk 5
photos <- photos %>% mutate(year = as.POSIXlt(DateTimeOriginal)$year + 1900)
photos
# Chunk 6
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
folder_years <- photos %>% group_by(dname) %>% summarize(year = Mode(year))
folder_years
# Chunk 7
folder_output <- list()
for(i in sort(unique(folder_years$year))) {
x <- folder_years %>% filter(year == i)
folder_output[as.character(i)][1] <- x[,1]
}
# Chunk 8
folder_output[["2010"]]
# Chunk 9
format_dir_list <- function(x) {
z <- NA
for (i in 1:length(x)) {
z[i] <- paste0("\"", x[i], "\"")
}
return(cat(z))
}
for (i in 1:16) {
cat("\n")
print(names(folder_output)[i])
cat("\n")
format_dir_list(folder_output[[i]])
cat("\n")
}
library(dplyr)
library(tidyr)
library(epiR)
fileURL <- "https://mching.github.io/datasets/parking_data.csv"
download.file(fileURL, destfile = "parking_data.csv", method = "curl")
dat <- read.csv("parking_data.csv")
dat <- tbl_df(dat)
dat <- dat %>% gather(Direction, n, Reverse_in:Forward_in)
dat <- dat[rep(1:nrow(dat), dat$n), 1:3]
dat$State <- factor(dat$State, levels = c("Hawaii", "California"))
dat$Direction <- factor(dat$Direction, levels = c("Reverse_in", "Forward_in"))
table1 <- table(dat$State, dat$Direction)
table1
epi.2by2(table1, method = "cross.sectional")
fisher.test(table1)
